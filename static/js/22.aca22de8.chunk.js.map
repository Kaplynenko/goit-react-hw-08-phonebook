{"version":3,"file":"static/js/22.aca22de8.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/components/Contact/Contact.module.css?03fd","components/Contact/Contact.js","redux/contacts/phone-operations.js","components/Modal/Modal.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.js","webpack://goit-react-hw-08-phonebook/./src/components/SearchForm/SearchForm.module.css?d6f1","components/SearchForm/SearchForm.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.js","webpack://goit-react-hw-08-phonebook/./src/Views/ContactsPage/ContactsPage.module.css?ea50","Views/ContactsPage/ContactsPage.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"ripple\":\"Contact_ripple__SMgJT\",\"serchEl\":\"Contact_serchEl__ywSZt\",\"deletBtn\":\"Contact_deletBtn__jnmgB\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Button from 'react-bootstrap/Button';\nimport s from './Contact.module.css';\n\nconst Contact = ({ name, number, deleteEl, id, editEl }) => {\n  return (\n    <div>\n      <ListGroup.Item className={s.serchEl}>\n        {name}: {number}\n        <Button\n          type=\"button\"\n          className={`${s.ripple} ${s.deletBtn}`}\n          onClick={() => deleteEl(id)}\n        >\n          Delete\n        </Button>\n        <Button\n          variant=\"primary\"\n          type=\"button\"\n          className={`${s.ripple} ${s.deletBtn}`}\n          onClick={() => editEl(id)}\n        >\n          Edit\n        </Button>\n      </ListGroup.Item>\n    </div>\n  );\n};\n\nContact.propType = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.number.isRequired,\n  deleteEl: PropTypes.func.isRequired,\n};\n\nexport default Contact;\n","import axios from 'axios';\nimport {\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  editContactRequest,\n  editContactSuccess,\n  editContactError,\n} from './phone-actions';\n\n// GET @ /tasks\nconst fetchContacts = () => async dispatch => {\n  dispatch(fetchContactsRequest());\n\n  try {\n    const { data } = await axios.get('/contacts');\n\n    dispatch(fetchContactsSuccess(data));\n  } catch (error) {\n    dispatch(fetchContactsError(error.message));\n  }\n};\n\n// POST @ /tasks\nconst addContact = contacts => dispatch => {\n  dispatch(addContactRequest());\n\n  axios\n    .post('/contacts', contacts)\n    .then(({ data }) => dispatch(addContactSuccess(data)))\n    .catch(error => dispatch(addContactError(error.message)));\n};\n\n// DELETE @ /tasks/:id\nconst deleteContact = contactId => dispatch => {\n  dispatch(editContactRequest());\n\n  axios\n    .delete(`/contacts/${contactId}`)\n    .then(() => dispatch(deleteContactSuccess(contactId)))\n    .catch(error => dispatch(deleteContactError(error.message)));\n};\n\n// edit @ /tasks/:id\nconst editContact =\n  ({ id, name, number }) =>\n  dispatch => {\n    const contact = { name, number };\n    dispatch(deleteContactRequest());\n\n    axios\n      .patch(`/contacts/${id}`, contact)\n      .then(({ data }) => dispatch(editContactSuccess(data)))\n      .catch(error => dispatch(editContactError(error.message)));\n  };\n\nconst contactsOperations = {\n  fetchContacts,\n  addContact,\n  deleteContact,\n  editContact,\n};\nexport default contactsOperations;\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport contactsOperations from 'redux/contacts/phone-operations';\n\nexport default function ShowModal({ show, handleClose, editableItem }) {\n  const [contact, setContact] = useState({\n    id: editableItem.id,\n    name: editableItem.name,\n    number: editableItem.number,\n  });\n  const arrayContact = useSelector(state => state.contacts);\n  const dispatch = useDispatch();\n  const editContact = data => dispatch(contactsOperations.editContact(data));\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    switch (name) {\n      case 'name':\n        setContact(prevState => ({\n          ...prevState,\n          [name]: value,\n        }));\n        break;\n\n      case 'number':\n        setContact(prevState => ({\n          ...prevState,\n          [name]: value,\n        }));\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleChangeSubmit = event => {\n    event.preventDefault();\n\n    const eventNameValue = contact.name;\n    const arrayContactNormalaise = arrayContact.contacts.map(e =>\n      e.name.toLowerCase().trim()\n    );\n\n    const filterName = arrayContactNormalaise.find(\n      e => e === eventNameValue.toLowerCase().trim()\n    );\n\n    filterName\n      ? alert(`${eventNameValue} is already in Contacts`)\n      : editContact(contact);\n\n    handleClose();\n  };\n\n  return (\n    <>\n      <Modal show={show} onHide={handleClose}>\n        <Modal.Header closeButton>\n          <Modal.Title>Edit contact</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <div /* className={s.searchForm} */>\n            <h2>Name</h2>\n            <input\n              /* className={s.name} */\n              type=\"text\"\n              name=\"name\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n              value={contact.name}\n              onChange={handleChange}\n            />\n\n            <h2>Number</h2>\n            <input\n              /* className={s.number} */\n              type=\"tel\"\n              name=\"number\"\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              required\n              value={contact.number}\n              onChange={handleChange}\n            />\n          </div>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={handleClose}>\n            Cencel\n          </Button>\n          <Button variant=\"primary\" type=\"submit\" onClick={handleChangeSubmit}>\n            Save Changes\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"List\":\"ContactList_List__gG+lN\"};","import React from 'react';\nimport { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport PropTypes from 'prop-types';\nimport Contact from 'components/Contact/Contact';\nimport contactsOperations from 'redux/contacts/phone-operations';\nimport ShowModal from 'components/Modal/Modal';\nimport s from '../ContactList/ContactList.module.css';\n\nconst getVisibleEl = (contacts = [], filter) => {\n  const normalizedFilter = filter.toLowerCase();\n  return contacts.filter(({ name }) =>\n    name.toLowerCase().includes(normalizedFilter)\n  );\n};\n\nexport default function ContactList() {\n  const [show, setShow] = useState(false);\n  const [editableItem, setEditableItem] = useState();\n  const handleShow = id => {\n    setShow(true);\n    const getItemForEdit = contactArrey.find(e => e.id === id);\n    setEditableItem(getItemForEdit);\n  };\n\n  const handleClose = () => setShow(false);\n\n  const dispatch = useDispatch();\n\n  const contactArrey = useSelector(state =>\n    getVisibleEl(state.contacts.contacts, state.contacts.filter)\n  );\n\n  const deleteContact = id => dispatch(contactsOperations.deleteContact(id));\n  useEffect(() => {\n    dispatch(contactsOperations.fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <ListGroup className={s.List}>\n        {contactArrey.map(({ id, name, number }) => {\n          return (\n            <Contact\n              key={id}\n              id={id}\n              name={name}\n              number={number}\n              deleteEl={deleteContact}\n              editEl={handleShow}\n            />\n          );\n        })}\n      </ListGroup>\n      <div>\n        {show && (\n          <ShowModal\n            show={show}\n            handleClose={handleClose}\n            editableItem={editableItem}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n\nContactList.propTypes = {\n  contactArrey: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }).isRequired\n  ),\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"searchBlock\":\"SearchForm_searchBlock__v7nWI\",\"searchInput\":\"SearchForm_searchInput__h6REp\",\"SearchForm\":\"SearchForm_SearchForm__jbIQn\"};","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Form from 'react-bootstrap/Form';\nimport s from './SearchForm.module.css';\nimport actions from '../../redux/contacts/phone-actions';\n\nexport default function SearchForm() {\n  const value = useSelector(state => state.contacts.filter);\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <Form.Label htmlFor=\"inputPassword5\" className={s.SearchForm}>\n        Find Contacts by Name\n      </Form.Label>\n      <Form.Control\n        type=\"text\"\n        id=\"inputPassword5\"\n        value={value}\n        aria-describedby=\"passwordHelpBlock\"\n        onChange={e => dispatch(actions.changeFilter(e.target.value))}\n      />\n      <Form.Text id=\"passwordHelpBlock\" muted>\n        Start typing to find contact you need\n      </Form.Text>\n    </>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"ContactForm\":\"ContactForm_ContactForm__QuT-m\"};","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport s from '../ContactForm/ContactForm.module.css';\n\nimport contactsOperations from 'redux/contacts/phone-operations';\n\nexport default function ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const arrayContact = useSelector(state => state.contacts);\n\n  const dispatch = useDispatch();\n  const addContact = data => dispatch(contactsOperations.addContact(data));\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const eventNameValue = event.target[0].value;\n    const arrayContactNormalaise = arrayContact.contacts.map(e =>\n      e.name.toLowerCase().trim()\n    );\n\n    const filterName = arrayContactNormalaise.find(\n      e => e === eventNameValue.toLowerCase().trim()\n    );\n\n    filterName\n      ? alert(`${eventNameValue} is already in Contacts`)\n      : addContact({ name, number });\n\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <Form onSubmit={handleSubmit} className={s.ContactForm}>\n      <div>\n        <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\n          <Form.Label>Name</Form.Label>\n          <Form.Control\n            type=\"text\"\n            placeholder=\"Enter name\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            value={name}\n            onChange={handleChange}\n          />\n          <Form.Text className=\"text-muted\">Please enter your name</Form.Text>\n        </Form.Group>\n\n        <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\n          <Form.Label>Number</Form.Label>\n          <Form.Control\n            type=\"tel\"\n            placeholder=\"Enter phone number\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            value={number}\n            onChange={handleChange}\n          />\n          <Form.Text className=\"text-muted\">\n            Please enter your phone number\n          </Form.Text>\n        </Form.Group>\n        <Button variant=\"primary\" type=\"submit\">\n          Add contact\n        </Button>\n      </div>\n    </Form>\n  );\n}\n\nContactForm.propType = {\n  addContact: PropTypes.func.isRequired,\n  arrayContact: PropTypes.array.isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"ListName\":\"ContactsPage_ListName__Ghewf\",\"Table\":\"ContactsPage_Table__FB20D\"};","import Container from '../../components/Container/';\nimport ContactList from '../../components/ContactList/';\nimport SearchForm from '../../components/SearchForm/';\nimport ContactForm from '../../components/ContactForm/';\nimport s from '../ContactsPage/ContactsPage.module.css';\n\nexport default function ContactPage() {\n  return (\n    <div>\n      <Container>\n        <h1>Phonebook</h1>\n        <div className={s.Table}>\n          <div>\n            <h2 className={s.ListName}>Adding contacts</h2>\n            <ContactForm />\n          </div>\n          <div>\n            <h2 className={s.ListName}>Contacts list</h2>\n            <SearchForm />\n            <ContactList />\n          </div>\n        </div>\n      </Container>\n    </div>\n  );\n}\n"],"names":["Contact","name","number","deleteEl","id","editEl","ListGroup","className","s","Button","type","onClick","variant","propType","PropTypes","contactsOperations","fetchContacts","dispatch","fetchContactsRequest","axios","data","fetchContactsSuccess","fetchContactsError","message","addContact","contacts","addContactRequest","then","addContactSuccess","catch","error","addContactError","deleteContact","contactId","editContactRequest","deleteContactSuccess","deleteContactError","editContact","contact","deleteContactRequest","editContactSuccess","editContactError","ShowModal","show","handleClose","editableItem","useState","setContact","arrayContact","useSelector","state","useDispatch","handleChange","event","target","value","prevState","Modal","onHide","closeButton","pattern","title","required","onChange","preventDefault","eventNameValue","map","e","toLowerCase","trim","find","alert","ContactList","setShow","setEditableItem","handleShow","getItemForEdit","contactArrey","normalizedFilter","filter","includes","getVisibleEl","useEffect","SearchForm","Form","htmlFor","actions","muted","ContactForm","setName","setNumber","reset","onSubmit","controlId","placeholder","ContactPage","Container"],"sourceRoot":""}